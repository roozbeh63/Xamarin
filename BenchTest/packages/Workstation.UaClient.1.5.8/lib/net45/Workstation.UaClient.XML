<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Workstation.UaClient</name>
    </assembly>
    <members>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadUnexpectedError">
            <summary>An unexpected error occurred.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadInternalError">
            <summary>An internal error occurred as a result of a programming or configuration error.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadOutOfMemory">
            <summary>Not enough memory to complete the operation.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadResourceUnavailable">
            <summary>An operating system resource is not available.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCommunicationError">
            <summary>A low level communication error occurred.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadEncodingError">
            <summary>Encoding halted because of invalid data in the objects being serialized.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDecodingError">
            <summary>Decoding halted because of invalid data in the stream.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadEncodingLimitsExceeded">
            <summary>The message encoding/decoding limits imposed by the stack have been exceeded.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadRequestTooLarge">
            <summary>The request message size exceeds limits set by the server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadResponseTooLarge">
            <summary>The response message size exceeds limits set by the client.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadUnknownResponse">
            <summary>An unrecognized response was received from the server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTimeout">
            <summary>The operation timed out.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadServiceUnsupported">
            <summary>The server does not support the requested service.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadShutdown">
            <summary>The operation was cancelled because the application is shutting down.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadServerNotConnected">
            <summary>The operation could not complete because the client is not connected to the server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadServerHalted">
            <summary>The server has stopped and cannot process any requests.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNothingToDo">
            <summary>There was nothing to do because the client passed a list of operations with no elements.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTooManyOperations">
            <summary>The request could not be processed because it specified too many operations.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTooManyMonitoredItems">
            <summary>The request could not be processed because there are too many monitored items in the subscription.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDataTypeIdUnknown">
            <summary>The extension object cannot be (de)serialized because the data type id is not recognized.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateInvalid">
            <summary>The certificate provided as a parameter is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSecurityChecksFailed">
            <summary>An error occurred verifying security.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateTimeInvalid">
            <summary>The Certificate has expired or is not yet valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateIssuerTimeInvalid">
            <summary>An Issuer Certificate has expired or is not yet valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateHostNameInvalid">
            <summary>The HostName used to connect to a Server does not match a HostName in the Certificate.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateUriInvalid">
            <summary>The URI specified in the ApplicationDescription does not match the URI in the Certificate.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateUseNotAllowed">
            <summary>The Certificate may not be used for the requested operation.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateIssuerUseNotAllowed">
            <summary>The Issuer Certificate may not be used for the requested operation.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateUntrusted">
            <summary>The Certificate is not trusted.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateRevocationUnknown">
            <summary>It was not possible to determine if the Certificate has been revoked.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateIssuerRevocationUnknown">
            <summary>It was not possible to determine if the Issuer Certificate has been revoked.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateRevoked">
            <summary>The Certificate has been revoked.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadCertificateIssuerRevoked">
            <summary>The Issuer Certificate has been revoked.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadUserAccessDenied">
            <summary>User does not have permission to perform the requested operation.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadIdentityTokenInvalid">
            <summary>The user identity token is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadIdentityTokenRejected">
            <summary>The user identity token is valid but the server has rejected it.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSecureChannelIdInvalid">
            <summary>The specified secure channel is no longer valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadInvalidTimestamp">
            <summary>The timestamp is outside the range allowed by the server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNonceInvalid">
            <summary>The nonce does appear to be not a random value or it is not the correct length.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSessionIdInvalid">
            <summary>The session id is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSessionClosed">
            <summary>The session was closed by the client.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSessionNotActivated">
            <summary>The session cannot be used because ActivateSession has not been called.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSubscriptionIdInvalid">
            <summary>The subscription id is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadRequestHeaderInvalid">
            <summary>The header for the request is missing or invalid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTimestampsToReturnInvalid">
            <summary>The timestamps to return parameter is invalid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadRequestCancelledByClient">
            <summary>The request was cancelled by the client.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodSubscriptionTransferred">
            <summary>The subscription was transferred to another session.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodCompletesAsynchronously">
            <summary>The processing will complete asynchronously.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodOverload">
            <summary>Sampling has slowed down due to resource limitations.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodClamped">
            <summary>The value written was accepted but was clamped.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNoCommunication">
            <summary>Communication with the data source is defined, but not established, and there is no last known value available.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadWaitingForInitialData">
            <summary>Waiting for the server to obtain values from the underlying data source.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNodeIdInvalid">
            <summary>The syntax of the node id is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNodeIdUnknown">
            <summary>The node id refers to a node that does not exist in the server address space.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadAttributeIdInvalid">
            <summary>The attribute is not supported for the specified Node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadIndexRangeInvalid">
            <summary>The syntax of the index range parameter is invalid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadIndexRangeNoData">
            <summary>No data exists within the range of indexes specified.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDataEncodingInvalid">
            <summary>The data encoding is invalid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDataEncodingUnsupported">
            <summary>The server does not support the requested data encoding for the node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNotReadable">
            <summary>The access level does not allow reading or subscribing to the Node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNotWritable">
            <summary>The access level does not allow writing to the Node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadOutOfRange">
            <summary>The value was out of range.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNotSupported">
            <summary>The requested operation is not supported.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNotFound">
            <summary>A requested item was not found or a search operation ended without success.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadObjectDeleted">
            <summary>The object cannot be used because it has been deleted.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNotImplemented">
            <summary>Requested operation is not implemented.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadMonitoringModeInvalid">
            <summary>The monitoring mode is invalid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadMonitoredItemIdInvalid">
            <summary>The monitoring item id does not refer to a valid monitored item.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadMonitoredItemFilterInvalid">
            <summary>The monitored item filter parameter is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadMonitoredItemFilterUnsupported">
            <summary>The server does not support the requested monitored item filter.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadFilterNotAllowed">
            <summary>A monitoring filter cannot be used in combination with the attribute specified.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadStructureMissing">
            <summary>A mandatory structured parameter was missing or null.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadEventFilterInvalid">
            <summary>The event filter is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadContentFilterInvalid">
            <summary>The content filter is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadFilterOperatorInvalid">
            <summary>An unregognized operator was provided in a filter.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadFilterOperatorUnsupported">
            <summary>A valid operator was provided, but the server does not provide support for this filter operator.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadFilterOperandCountMismatch">
            <summary>The number of operands provided for the filter operator was less then expected for the operand provided.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadFilterOperandInvalid">
            <summary>The operand used in a content filter is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadFilterElementInvalid">
            <summary>The referenced element is not a valid element in the content filter.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadFilterLiteralInvalid">
            <summary>The referenced literal is not a valid value.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadContinuationPointInvalid">
            <summary>The continuation point provide is longer valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNoContinuationPoints">
            <summary>The operation could not be processed because all continuation points have been allocated.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadReferenceTypeIdInvalid">
            <summary>The operation could not be processed because all continuation points have been allocated.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadBrowseDirectionInvalid">
            <summary>The browse direction is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNodeNotInView">
            <summary>The node is not part of the view.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadServerUriInvalid">
            <summary>The ServerUri is not a valid URI.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadServerNameMissing">
            <summary>No ServerName was specified.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDiscoveryUrlMissing">
            <summary>No DiscoveryUrl was specified.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSempahoreFileMissing">
            <summary>The semaphore file specified by the client is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadRequestTypeInvalid">
            <summary>The security token request type is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSecurityModeRejected">
            <summary>The security mode does not meet the requirements set by the Server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSecurityPolicyRejected">
            <summary>The security policy does not meet the requirements set by the Server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTooManySessions">
            <summary>The server has reached its maximum number of sessions.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadUserSignatureInvalid">
            <summary>The user token signature is missing or invalid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadApplicationSignatureInvalid">
            <summary>The signature generated with the client certificate is missing or invalid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNoValidCertificates">
            <summary>The client did not provide at least one software certificate that is valid and meets the profile requirements for the server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadIdentityChangeNotSupported">
            <summary>The Server does not support changing the user identity assigned to the session.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadRequestCancelledByRequest">
            <summary>The request was cancelled by the client with the Cancel service.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadParentNodeIdInvalid">
            <summary>The parent node id does not to refer to a valid node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadReferenceNotAllowed">
            <summary>The reference could not be created because it violates constraints imposed by the data model.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNodeIdRejected">
            <summary>The requested node id was reject because it was either invalid or server does not allow node ids to be specified by the client.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNodeIdExists">
            <summary>The requested node id is already used by another node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNodeClassInvalid">
            <summary>The node class is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadBrowseNameInvalid">
            <summary>The browse name is invalid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadBrowseNameDuplicated">
            <summary>The browse name is not unique among nodes that share the same relationship with the parent.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNodeAttributesInvalid">
            <summary>The node attributes are not valid for the node class.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTypeDefinitionInvalid">
            <summary>The type definition node id does not reference an appropriate type node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSourceNodeIdInvalid">
            <summary>The source node id does not reference a valid node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTargetNodeIdInvalid">
            <summary>The target node id does not reference a valid node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDuplicateReferenceNotAllowed">
            <summary>The reference type between the nodes is already defined.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadInvalidSelfReference">
            <summary>The server does not allow this type of self reference on this node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadReferenceLocalOnly">
            <summary>The reference type is not valid for a reference to a remote server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNoDeleteRights">
            <summary>The server will not allow the node to be deleted.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.UncertainReferenceNotDeleted">
            <summary>The server was not able to delete all target references.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadServerIndexInvalid">
            <summary>The server index is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadViewIdUnknown">
            <summary>The view id does not refer to a valid view node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadViewTimestampInvalid">
            <summary>The view timestamp is not available or not supported.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadViewParameterMismatch">
            <summary>The view parameters are not consistent with each other.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadViewVersionInvalid">
            <summary>The view version is not available or not supported.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.UncertainNotAllNodesAvailable">
            <summary>The list of references may not be complete because the underlying system is not available.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodResultsMayBeIncomplete">
            <summary>The server should have followed a reference to a node in a remote server but did not. The result set may be incomplete.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNotTypeDefinition">
            <summary>The provided Nodeid was not a type definition nodeid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.UncertainReferenceOutOfServer">
            <summary>One of the references to follow in the relative path references to a node in the address space in another server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTooManyMatches">
            <summary>The requested operation has too many matches to return.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadQueryTooComplex">
            <summary>The requested operation requires too many resources in the server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNoMatch">
            <summary>The requested operation has no match to return.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadMaxAgeInvalid">
            <summary>The max age parameter is invalid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadHistoryOperationInvalid">
            <summary>The history details parameter is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadHistoryOperationUnsupported">
            <summary>The server does not support the requested operation.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadInvalidTimestampArgument">
            <summary>The defined timestamp to return was invalid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadWriteNotSupported">
            <summary>The server not does support writing the combination of value, status and timestamps provided.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTypeMismatch">
            <summary>The value supplied for the attribute is not of the same type as the attribute's value.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadMethodInvalid">
            <summary>The method id does not refer to a method for the specified object.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadArgumentsMissing">
            <summary>The client did not specify all of the input arguments for the method.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTooManySubscriptions">
            <summary>The server has reached its  maximum number of subscriptions.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTooManyPublishRequests">
            <summary>The server has reached the maximum number of queued publish requests.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNoSubscription">
            <summary>There is no subscription available for this session.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSequenceNumberUnknown">
            <summary>The sequence number is unknown to the server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadMessageNotAvailable">
            <summary>The requested notification message is no longer available.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadInsufficientClientProfile">
            <summary>The Client of the current Session does not support one or more Profiles that are necessary for the Subscription.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadStateNotActive">
            <summary>The sub-state machine is not currently active.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTcpServerTooBusy">
            <summary>The server cannot process the request because it is too busy.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTcpMessageTypeInvalid">
            <summary>The type of the message specified in the header invalid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTcpSecureChannelUnknown">
            <summary>The SecureChannelId and/or TokenId are not currently in use.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTcpMessageTooLarge">
            <summary>The size of the message specified in the header is too large.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTcpNotEnoughResources">
            <summary>There are not enough resources to process the request.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTcpInternalError">
            <summary>An internal error occurred.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTcpEndpointUrlInvalid">
            <summary>The Server does not recognize the QueryString specified.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadRequestInterrupted">
            <summary>The request could not be sent because of a network interruption.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadRequestTimeout">
            <summary>Timeout occurred while processing the request.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSecureChannelClosed">
            <summary>The secure channel has been closed.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSecureChannelTokenUnknown">
            <summary>The token has expired or is not recognized.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSequenceNumberInvalid">
            <summary>The sequence number is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadProtocolVersionUnsupported">
            <summary>The applications do not have compatible protocol versions.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadConfigurationError">
            <summary>There is a problem with the configuration that affects the usefulness of the value.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNotConnected">
            <summary>The variable should receive its value from another variable, but has never been configured to do so.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDeviceFailure">
            <summary>There has been a failure in the device/data source that generates the value that has affected the value.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSensorFailure">
            <summary>There has been a failure in the sensor from which the value is derived by the device/data source.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadOutOfService">
            <summary>The source of the data is not operational.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDeadbandFilterInvalid">
            <summary>The deadband filter is not valid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.UncertainNoCommunicationLastUsableValue">
            <summary>Communication to the data source has failed. The variable value is the last value that had a good quality.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.UncertainLastUsableValue">
            <summary>Whatever was updating this value has stopped doing so.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.UncertainSubstituteValue">
            <summary>The value is an operational value that was manually overwritten.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.UncertainInitialValue">
            <summary>The value is an initial value for a variable that normally receives its value from another variable.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.UncertainSensorNotAccurate">
            <summary>The value is at one of the sensor limits.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.UncertainEngineeringUnitsExceeded">
            <summary>The value is outside of the range of values defined for this parameter.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.UncertainSubNormal">
            <summary>The value is derived from multiple sources and has less than the required number of Good sources.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodLocalOverride">
            <summary>The value has been overridden.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadRefreshInProgress">
            <summary>This Condition refresh failed, a Condition refresh operation is already in progress.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadConditionAlreadyDisabled">
            <summary>This condition has already been disabled.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadConditionAlreadyEnabled">
            <summary>This condition has already been enabled.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadConditionDisabled">
            <summary>Property not available, this condition is disabled.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadEventIdUnknown">
            <summary>The specified event id is not recognized.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadEventNotAcknowledgeable">
            <summary>The event cannot be acknowledged.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDialogNotActive">
            <summary>The dialog condition is not active.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDialogResponseInvalid">
            <summary>The response is not valid for the dialog.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadConditionBranchAlreadyAcked">
            <summary>The condition branch has already been acknowledged.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadConditionBranchAlreadyConfirmed">
            <summary>The condition branch has already been confirmed.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadConditionAlreadyShelved">
            <summary>The condition has already been shelved.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadConditionNotShelved">
            <summary>The condition is not currently shelved.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadShelvingTimeOutOfRange">
            <summary>The shelving time not within an acceptable range.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNoData">
            <summary>No data exists for the requested time range or event filter.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadBoundNotFound">
            <summary>No data found to provide upper or lower bound value.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadBoundNotSupported">
            <summary>The server cannot retrieve a bound for the variable.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDataLost">
            <summary>Data is missing due to collection started/stopped/lost.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDataUnavailable">
            <summary>Expected data is unavailable for the requested time range due to an un-mounted volume, an off-line archive or tape, or similar reason for temporary unavailability.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadEntryExists">
            <summary>The data or event was not successfully inserted because a matching entry exists.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNoEntryExists">
            <summary>The data or event was not successfully updated because no matching entry exists.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadTimestampNotSupported">
            <summary>The client requested history using a timestamp format the server does not support (i.e requested ServerTimestamp when server only supports SourceTimestamp).</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodEntryInserted">
            <summary>The data or event was successfully inserted into the historical database.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodEntryReplaced">
            <summary>The data or event field was successfully replaced in the historical database.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.UncertainDataSubNormal">
            <summary>The value is derived from multiple values and has less than the required number of Good values.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodNoData">
            <summary>No data exists for the requested time range or event filter.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodMoreData">
            <summary>The data or event field was successfully replaced in the historical database.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadAggregateListMismatch">
            <summary>The requested number of Aggregates does not match the requested number of NodeIds.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadAggregateNotSupported">
            <summary>The requested Aggregate is not support by the server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadAggregateInvalidInputs">
            <summary>The aggregate value could not be derived due to invalid data inputs.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadAggregateConfigurationRejected">
            <summary>The aggregate configuration is not valid for specified node.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodDataIgnored">
            <summary>The request pecifies fields which are not valid for the EventType or cannot be saved by the historian.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodCommunicationEvent">
            <summary>The communication layer has raised an event.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodShutdownEvent">
            <summary>The system is shutting down.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodCallAgain">
            <summary>The operation is not finished and needs to be called again.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.GoodNonCriticalTimeout">
            <summary>A non-critical timeout occurred.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadInvalidArgument">
            <summary>One or more arguments are invalid.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadConnectionRejected">
            <summary>Could not establish a network connection to remote server.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadDisconnect">
            <summary>The server has disconnected from the client.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadConnectionClosed">
            <summary>The network connection has been closed.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadInvalidState">
            <summary>The operation cannot be completed because the object is closed, uninitialized or in some other invalid state.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadEndOfStream">
            <summary>Cannot move beyond end of the stream.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadNoDataAvailable">
            <summary>No data is currently available for reading from a non-blocking stream.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadWaitingForResponse">
            <summary>The asynchronous operation is waiting for a response.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadOperationAbandoned">
            <summary>The asynchronous operation was abandoned by the caller.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadExpectedStreamToBlock">
            <summary>The stream did not return all data requested (possibly because it is a non-blocking stream).</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadWouldBlock">
            <summary>Non blocking behaviour is required and the operation would block.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadSyntaxError">
            <summary>A value had an invalid syntax.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.BadMaxConnectionsReached">
            <summary>The operation could not be finished because all available connections are in use.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.StatusCodes.Good">
            <summary>The operation completed successfully.</summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.AcknowledgeableCondition">
            <summary>
            Represents an acknowledgeable condition.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.AlarmCondition">
            <summary>
            Represents an acknowledgeable condition.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.ArraySegmentExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.ArraySegment`1"/>.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.AsArraySegment``1(``0[],System.Int32,System.Int32)">
            <summary>
            Creates an array segment referencing this array.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="array">The array.</param>
            <param name="offset">The offset in this array where the segment begins. Must be in the range <c>[0, <paramref name="array"/>.Length]</c>.</param>
            <param name="count">The length of the segment. Must be in the range <c>[0, <paramref name="array"/>.Length - <paramref name="offset"/>]</c>.</param>
            <returns>A new array segment.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.AsArraySegment``1(``0[],System.Int32)">
            <summary>
            Creates an array segment referencing this array.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="array">The array.</param>
            <param name="offset">The offset in this array where the segment begins. Defaults to <c>0</c> (the beginning of the array). Must be in the range <c>[0, <paramref name="array"/>.Length]</c>.</param>
            <returns>A new array segment.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.CreateStream(System.ArraySegment{System.Byte},System.Boolean)">
            <summary>
            Creates a <see cref="T:System.IO.MemoryStream"/> over this array segment. Multiple streams may be created for the same array and array segment, but if one of them writes then any buffering will cause inconsistent views.
            </summary>
            <param name="segment">The array segment.</param>
            <param name="writable">A value indicating whether the stream is writable. Defautls to <c>true</c>.</param>
            <returns>A new <see cref="T:System.IO.MemoryStream"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.CreateBinaryReader(System.ArraySegment{System.Byte})">
            <summary>
            Creates a <see cref="T:System.IO.BinaryReader"/> over this array segment.
            </summary>
            <param name="segment">The array segment.</param>
            <returns>A new <see cref="T:System.IO.BinaryReader"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.CreateBinaryWriter(System.ArraySegment{System.Byte})">
            <summary>
            Creates a <see cref="T:System.IO.BinaryWriter"/> over this array segment.
            </summary>
            <param name="segment">The array segment.</param>
            <returns>A new <see cref="T:System.IO.BinaryWriter"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.Take``1(System.ArraySegment{``0},System.Int32)">
            <summary>
            Creates a new array segment by taking a number of elements from the beginning of this array segment.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The array segment.</param>
            <param name="count">The number of elements in the new array segment. This must be in the range <c>[0, <paramref name="segment"/>.Count]</c>.</param>
            <returns>The new array segment.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.Skip``1(System.ArraySegment{``0},System.Int32)">
            <summary>
            Creates a new array segment by skipping a number of elements from the beginning of this array segment.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The array segment.</param>
            <param name="count">The number of elements to skip. This must be in the range <c>[0, <paramref name="segment"/>.Count]</c>.</param>
            <returns>The new array segment.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.Slice``1(System.ArraySegment{``0},System.Int32,System.Int32)">
            <summary>
            Creates a new array segment by skipping a number of elements and then taking a number of elements from this array segment.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The array segment.</param>
            <param name="skipCount">The number of elements to skip. This must be in the range <c>[0, <paramref name="segment"/>.Count]</c>.</param>
            <param name="takeCount">The number of elements in the new array segment. This must be in the range <c>[0, <paramref name="segment"/>.Count - <paramref name="skipCount"/>]</c>.</param>
            <returns>The new array segment.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.TakeLast``1(System.ArraySegment{``0},System.Int32)">
            <summary>
            Creates a new array segment by taking a number of elements from the end of this array segment.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The array segment.</param>
            <param name="count">The number of elements in the new array segment. This must be in the range <c>[0, <paramref name="segment"/>.Count]</c>.</param>
            <returns>The new array segment.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.SkipLast``1(System.ArraySegment{``0},System.Int32)">
            <summary>
            Creates a new array segment by skipping a number of elements from the end of this array segment.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The array segment.</param>
            <param name="count">The number of elements to skip. This must be in the range <c>[0, <paramref name="segment"/>.Count]</c>.</param>
            <returns>The new array segment.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.CopyTo``1(System.ArraySegment{``0},System.ArraySegment{``0})">
            <summary>
            Copies the elements in this array segment into a destination array segment. The copy operation will not overflow the bounds of the segments; it will copy <c>min(segment.Count, destination.Count)</c> elements.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The source array segment.</param>
            <param name="destination">The detsintation array segment.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.CopyTo``1(System.ArraySegment{``0},``0[],System.Int32)">
            <summary>
            Copies the elements in this array segment into a destination array.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The array segment.</param>
            <param name="array">The destination array. May not be <c>null</c>.</param>
            <param name="arrayIndex">The index in the destination array at which to begin copying. Defaults to <c>0</c>. Must be greater than or equal to <c>0</c>.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ArraySegmentExtensions.ToArray``1(System.ArraySegment{``0})">
            <summary>
            Creates a new array containing the elements in this array segment.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The array segment.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.AttributeServiceSet.ReadAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.ReadRequest)">
            <summary>
            Reads a list of Node attributes.
            </summary>
            <param name="client">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.ReadRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.ReadResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.AttributeServiceSet.WriteAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.WriteRequest)">
            <summary>
            Writes a list of Node attributes.
            </summary>
            <param name="client">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.WriteRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.WriteResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.AttributeServiceSet.HistoryReadAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.HistoryReadRequest)">
            <summary>
            Reads historical values or Events of one or more Nodes.
            </summary>
            <param name="client">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.HistoryReadRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.HistoryReadResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.AttributeServiceSet.HistoryUpdateAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.HistoryUpdateRequest)">
            <summary>
            Updates historical values or Events of one or more Nodes.
            </summary>
            <param name="client">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.HistoryUpdateRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.HistoryUpdateResponse"/>.</returns>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.BaseEvent">
            <summary>
            Represents an event.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.BinaryEncodingIdAttribute">
            <summary>
            Attribute for classes of type IEncodable to indicate the binary encoding id.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.Channels.CommunicationObject">
            <summary>
            Provides a common base implementation for the basic state machine common to all communication-oriented objects in the system.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.Channels.CommunicationObject"/> class.
            </summary>
            <param name="loggerFactory">The logger factory.</param>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.CommunicationObject.State">
            <summary>
            Gets or sets gets a value that indicates the current state of the communication object.
            </summary>
            <returns>A value from the <see cref="T:ConverterSystems.ServiceModel.Ua.CommunicationState" /> enumeration that indicates the current state of the object.</returns>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.CommunicationObject.Logger">
            <summary>
            Gets the current logger
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.AbortAsync(System.Threading.CancellationToken)">
            <summary>
            Causes a communication object to transition immediately from its current state into the closing state.
            </summary>
            <param name="token">The <see cref="T:ConverterSystems.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Causes a communication object to transition from its current state into the closed state.
            </summary>
            <param name="token">The <see cref="T:ConverterSystems.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            Causes a communication object to transition from the created state into the opened state.
            </summary>
            <param name="token">The <see cref="T:ConverterSystems.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.FaultAsync(System.Threading.CancellationToken)">
            <summary>
            Causes a communication object to transition from its current state into the faulted state.
            </summary>
            <param name="token">The <see cref="T:ConverterSystems.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.FaultAsync(System.Exception,System.Threading.CancellationToken)">
            <summary>
            Causes a communication object to transition from its current state into the faulted state.
            </summary>
            <param name="exception">The exception.</param>
            <param name="token">The <see cref="T:ConverterSystems.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.OnAbortAsync(System.Threading.CancellationToken)">
            <summary>
            Inserts processing on a communication object after it transitions to the closing state due to the invocation of the AbortAsync operation.
            </summary>
            <param name="token">The <see cref="T:ConverterSystems.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.OnCloseAsync(System.Threading.CancellationToken)">
            <summary>
            Inserts processing on a communication object after it transitions to the closing state due to the invocation of the CloseAsync operation.
            </summary>
            <param name="token">The <see cref="T:ConverterSystems.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.OnClosedAsync(System.Threading.CancellationToken)">
            <summary>
            Invoked during the transition of a communication object into the closed state.
            </summary>
            <param name="token">The <see cref="T:ConverterSystems.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.OnClosingAsync(System.Threading.CancellationToken)">
            <summary>
            Invoked during the transition of a communication object into the closing state.
            </summary>
            <param name="token">The <see cref="T:ConverterSystems.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.OnFaulted(System.Threading.CancellationToken)">
            <summary>
            Inserts processing on a communication object after it transitions to the faulted state due to the FaultAsync operation.
            </summary>
            <param name="token">The <see cref="T:ConverterSystems.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.OnOpenAsync(System.Threading.CancellationToken)">
            <summary>
            Inserts processing on a communication object after it transitions into the opening state.
            </summary>
            <param name="token">The <see cref="T:ConverterSystems.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.OnOpenedAsync(System.Threading.CancellationToken)">
            <summary>
            Invoked during the transition of a communication object into the opened state.
            </summary>
            <param name="token">The <see cref="T:ConverterSystems.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.OnOpeningAsync(System.Threading.CancellationToken)">
            <summary>
            Invoked during the transition of a communication object into the opening state.
            </summary>
            <param name="token">The <see cref="T:ConverterSystems.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.ThrowIfDisposedOrImmutable">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the communication object is not in the created state.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.CommunicationObject.ThrowIfClosedOrNotOpening">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the communication object is not in the opening, open, or closing state.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel">
            <summary>
            Provides a method to send a <see cref="T:ConverterSystems.ServiceModel.Ua.IServiceRequest" /> to a RemoteEndpoint.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Channels.IRequestChannel.RemoteEndpoint">
            <summary>Gets the remote address to which the request channel sends messages. </summary>
            <returns>The <see cref="T:ConverterSystems.ServiceModel.Ua.EndpointDescription" /> to which the request channel sends messages. </returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.IRequestChannel.RequestAsync(Workstation.ServiceModel.Ua.IServiceRequest)">
            <summary>Sends an IServiceRequest and returns the correlated IServiceResponse.</summary>
            <returns>The <see cref="T:ConverterSystems.ServiceModel.Ua.IServiceResponse" /> received in response to the request. </returns>
            <param name="request">The <see cref="T:ConverterSystems.ServiceModel.Ua.IServiceRequest" /> to be transmitted.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.RsaExtensions.EncryptTokenData(Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters,System.Byte[],System.String)">
            <summary>
            Encrypts IdentityToken data with the RSA algorithm.
            </summary>
            <returns>A byte array.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.RsaExtensions.EncryptStream(Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters,System.IO.Stream,System.IO.Stream,System.String)">
            <summary>
            Encrypts a data stream with the RSA algorithm.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.RsaExtensions.DecryptTokenData(Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters,System.Byte[],System.String)">
            <summary>
            Decrypts IdentityToken data with the RSA algorithm.
            </summary>
            <returns>A byte array.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.RsaExtensions.DecryptStream(Org.BouncyCastle.Crypto.Parameters.RsaKeyParameters,System.IO.Stream,System.IO.Stream,System.String)">
            <summary>
            Decrypts a data stream with the RSA algorithm.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel">
            <summary>
            A channel that opens a secure channel.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.#ctor(Workstation.ServiceModel.Ua.ApplicationDescription,Workstation.ServiceModel.Ua.ICertificateStore,Workstation.ServiceModel.Ua.EndpointDescription,Microsoft.Extensions.Logging.ILoggerFactory,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel"/> class.
            </summary>
            <param name="localDescription">The local description.</param>
            <param name="certificateStore">The local certificate store.</param>
            <param name="remoteEndpoint">The remote endpoint</param>
            <param name="loggerFactory">The logger factory.</param>
            <param name="timeoutHint">The default number of milliseconds that may elapse before an operation is cancelled by the service.</param>
            <param name="diagnosticsHint">The default diagnostics flags to be requested by the service.</param>
            <param name="localReceiveBufferSize">The size of the receive buffer.</param>
            <param name="localSendBufferSize">The size of the send buffer.</param>
            <param name="localMaxMessageSize">The maximum total size of a message.</param>
            <param name="localMaxChunkCount">The maximum number of message chunks.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSecureChannel.OnOpeningAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel">
            <summary>
            A channel that opens a session.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel.#ctor(Workstation.ServiceModel.Ua.ApplicationDescription,Workstation.ServiceModel.Ua.ICertificateStore,Workstation.ServiceModel.Ua.IUserIdentity,Workstation.ServiceModel.Ua.EndpointDescription,Microsoft.Extensions.Logging.ILoggerFactory,System.Double,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.Channels.UaTcpSessionChannel"/> class.
            </summary>
            <param name="localDescription">The <see cref="T:Workstation.ServiceModel.Ua.ApplicationDescription"/> of the local application.</param>
            <param name="certificateStore">The local certificate store.</param>
            <param name="userIdentity">The user identity. Provide an <see cref="T:Workstation.ServiceModel.Ua.AnonymousIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.UserNameIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.IssuedIdentity"/> or <see cref="T:Workstation.ServiceModel.Ua.X509Identity"/>.</param>
            <param name="remoteEndpoint">The <see cref="T:Workstation.ServiceModel.Ua.EndpointDescription"/> of the remote application. Obtained from a prior call to UaTcpDiscoveryClient.GetEndpoints.</param>
            <param name="loggerFactory">The logger factory.</param>
            <param name="sessionTimeout">The requested number of milliseconds that a session may be unused before being closed by the server.</param>
            <param name="timeoutHint">The default number of milliseconds that may elapse before an operation is cancelled by the service.</param>
            <param name="diagnosticsHint">The default diagnostics flags to be requested by the service.</param>
            <param name="localReceiveBufferSize">The size of the receive buffer.</param>
            <param name="localSendBufferSize">The size of the send buffer.</param>
            <param name="localMaxMessageSize">The maximum total size of a message.</param>
            <param name="localMaxChunkCount">The maximum number of message chunks.</param>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.Channels.UaTcpTransportChannel">
            <summary>
            A channel that opens a TCP socket.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Channels.UaTcpTransportChannel.#ctor(Workstation.ServiceModel.Ua.EndpointDescription,Microsoft.Extensions.Logging.ILoggerFactory,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.Channels.UaTcpTransportChannel"/> class.
            </summary>
            <param name="remoteEndpoint">The remote endpoint.</param>
            <param name="loggerFactory">The logger factory.</param>
            <param name="localReceiveBufferSize">The size of the receive buffer.</param>
            <param name="localSendBufferSize">The size of the send buffer.</param>
            <param name="localMaxMessageSize">The maximum total size of a message.</param>
            <param name="localMaxChunkCount">The maximum number of message chunks.</param>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.CommunicationState">
            <summary>Defines the states in which an <see cref="T:ConverterSystems.ServiceModel.Ua.ICommunicationObject" /> can exist. </summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.CommunicationState.Created">
            <summary>Indicates that the communication object has been instantiated and is configurable, but not yet open or ready for use.</summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.CommunicationState.Opening">
            <summary>Indicates that the communication object is being transitioned to the opened state. </summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.CommunicationState.Opened">
            <summary>Indicates that the communication object is now open and ready to be used. </summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.CommunicationState.Closing">
            <summary>Indicates that the communication object is transitioning to the closed state. </summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.CommunicationState.Closed">
            <summary>Indicates that the communication object has been closed and is no longer usable. </summary>
        </member>
        <member name="F:Workstation.ServiceModel.Ua.CommunicationState.Faulted">
            <summary>Indicates that the communication object has encountered an error or fault from which it cannot recover and from which it is no longer usable. </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.Condition">
            <summary>
            Represents a condition.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.DataTypeIdAttribute">
            <summary>
            Attribute for classes to indicate the data type id.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.DataValueExtensions.GetValue(Workstation.ServiceModel.Ua.DataValue)">
            <summary>
            Gets the value of the DataValue, or the default value for the type.
            </summary>
            <param name="dataValue">The DataValue.</param>
            <returns>The value if an instance of the specified Type, otherwise the Type's default value.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.DataValueExtensions.GetValueOrDefault``1(Workstation.ServiceModel.Ua.DataValue)">
            <summary>
            Gets the value of the DataValue, or the default value for the type.
            </summary>
            <typeparam name="T">The expected type.</typeparam>
            <param name="dataValue">The DataValue.</param>
            <returns>The value if an instance of the specified Type, otherwise the Type's default value.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.DataValueExtensions.GetValueOrDefault``1(Workstation.ServiceModel.Ua.DataValue,``0)">
            <summary>
            Gets the value of the DataValue, or the specified default value.
            </summary>
            <typeparam name="T">The expected type.</typeparam>
            <param name="dataValue">A DataValue</param>
            <param name="defaultValue">A default value.</param>
            <returns>The value if an instance of the specified Type, otherwise the specified default value.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.DataValueExtensions.GetValueOrDefault(Workstation.ServiceModel.Ua.DataValue,System.Type)">
            <summary>
            Gets the value of the DataValue, or the default value of the type.
            </summary>
            <param name="dataValue">A DataValue</param>
            <param name="dataType">A data type.</param>
            <returns>The value if an instance of the specified Type, otherwise the Type's default value.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.DataValueExtensions.GetValueOrDefault(Workstation.ServiceModel.Ua.DataValue,System.Type,System.Object)">
            <summary>
            Gets the value of the DataValue, or the type's default value.
            </summary>
            <param name="dataValue">A DataValue</param>
            <param name="dataType">The expected type.</param>
            <param name="defaultValue">A default value.</param>
            <returns>The value if an instance of the specified Type, otherwise the specified default value.</returns>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.DirectoryStore">
            <summary>
            A certificate store.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.DirectoryStore.#ctor(System.String,System.Boolean,System.Boolean,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.DirectoryStore"/> class.
            </summary>
            <param name="pkiDirectoryPath">The path to the local pki directory.</param>
            <param name="acceptAllRemoteCertificates">Set true to accept all remote certificates.</param>
            <param name="createLocalCertificateIfNotExist">Set true to create a local certificate and private key, if the files do not exist.</param>
            <param name="loggerFactory">A logger factory.</param>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.DirectoryStore.AcceptAllRemoteCertificates">
            <summary>
            Gets a value indicating whether to accept all remote certificates.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.DirectoryStore.CreateLocalCertificateIfNotExist">
            <summary>
            Gets a value indicating whether to create a local certificate if it does not exist.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.DirectoryStore.GetLocalCertificate(Workstation.ServiceModel.Ua.ApplicationDescription)">
            <inheritdoc/>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.DirectoryStore.ValidateRemoteCertificate(Org.BouncyCastle.X509.X509Certificate)">
            <inheritdoc/>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.DirectoryStore.IsSelfSigned(Org.BouncyCastle.X509.X509Certificate)">
            <summary>
            Checks whether given <see cref="T:Org.BouncyCastle.X509.X509Certificate"/> is self-signed.
            </summary>
            <param name="cert">an <see cref="T:Org.BouncyCastle.X509.X509Certificate"/>.</param>
            <returns>True, if self signed.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ICertificateStore.GetLocalCertificate(Workstation.ServiceModel.Ua.ApplicationDescription)">
            <summary>
            Gets the local certificate and private key.
            </summary>
            <returns>The local certificate and private key.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ICertificateStore.ValidateRemoteCertificate(Org.BouncyCastle.X509.X509Certificate)">
            <summary>
            Validates the remote certificate.
            </summary>
            <param name="certificate">the remote certificate.</param>
            <returns>The validator result.</returns>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.ICommunicationObject">
            <summary>Defines the contract for the basic state machine for all communication-oriented objects in the system.</summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.ICommunicationObject.State">
            <summary>Gets the current state of the communication-oriented object.</summary>
            <returns>The value of the <see cref="T:System.ServiceModel.CommunicationState" /> of the object.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ICommunicationObject.AbortAsync(System.Threading.CancellationToken)">
            <summary>Causes a communication object to transition immediately from its current state into the closed state.  </summary>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> that notifies that the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ICommunicationObject.CloseAsync(System.Threading.CancellationToken)">
            <summary>Causes a communication object to transition from its current state into the closed state.  </summary>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> that notifies that the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ICommunicationObject.OpenAsync(System.Threading.CancellationToken)">
            <summary>Causes a communication object to transition from the created state into the opened state.  </summary>
            <param name="token">The <see cref="T:System.Threading.CancellationToken" /> that notifies that the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.ISetDataErrorInfo">
            <summary>
            Sets the result of create, read, write, or publish service calls.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ISetDataErrorInfo.SetErrors(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the result of a create, read, write, or publish service call.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="errors">The error messages.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.LocalizedText.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.LocalizedText"/> class.
            </summary>
            <param name="text">The text in the specified locale.</param>
            <param name="locale">The locale.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.MethodServiceSet.CallAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.CallRequest)">
            <summary>
            Calls (invokes) a list of Methods.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.CallRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.CallResponse"/>.</returns>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.MonitoredItemAttribute">
            <summary>
            Specifies the MonitoredItem that will be created for this property.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.MonitoredItemAttribute.#ctor(System.String,System.UInt32,System.String,System.Int32,System.UInt32,System.Boolean,Workstation.ServiceModel.Ua.DataChangeTrigger,Workstation.ServiceModel.Ua.DeadbandType,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.MonitoredItemAttribute"/> class.
            </summary>
            <param name="nodeId">the NodeId to monitor.</param>
            <param name="attributeId">the attribute to monitor.</param>
            <param name="indexRange">the range of array indexes to monitor.</param>
            <param name="samplingInterval">the sampling interval.</param>
            <param name="queueSize">the length of the queue used by the server to buffer values.</param>
            <param name="discardOldest">a value indicating whether to discard the oldest entries in the queue when it is full.</param>
            <param name="dataChangeTrigger">the properties that trigger a data change.</param>
            <param name="deadbandType">the type of deadband calculation.</param>
            <param name="deadbandValue">the deadband value.</param>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemAttribute.NodeId">
            <summary>
            Gets the NodeId to monitor.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemAttribute.AttributeId">
            <summary>
            Gets the attribute to monitor.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemAttribute.IndexRange">
            <summary>
            Gets the range of array indexes to monitor.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemAttribute.SamplingInterval">
            <summary>
            Gets the sampling interval.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemAttribute.QueueSize">
            <summary>
            Gets the length of the queue used by the server to buffer values.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemAttribute.DiscardOldest">
            <summary>
            Gets a value indicating whether to discard the oldest entries in the queue when it is full.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemAttribute.DataChangeTrigger">
            <summary>
            Gets the properties that trigger a data change.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemAttribute.DeadbandType">
            <summary>
            Gets the type of deadband calculation.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemAttribute.DeadbandValue">
            <summary>
            Gets the deadband value.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.MonitoredItemBase">
            <summary>
            Subscribes to data changes or events of an attribute of a node.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.MonitoredItemBase.#ctor(System.Reflection.PropertyInfo,Workstation.ServiceModel.Ua.NodeId,System.UInt32,System.String,Workstation.ServiceModel.Ua.MonitoringMode,System.Int32,Workstation.ServiceModel.Ua.MonitoringFilter,System.UInt32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.MonitoredItemBase"/> class.
            </summary>
            <param name="property">the property of the model to store the published value.</param>
            <param name="nodeId">the NodeId to monitor.</param>
            <param name="attributeId">the attribute to monitor.</param>
            <param name="indexRange">the range of array indexes to monitor.</param>
            <param name="monitoringMode">the monitoring mode.</param>
            <param name="samplingInterval">the sampling interval.</param>
            <param name="filter">the properties that trigger a notification.</param>
            <param name="queueSize">the length of the queue used by the server to buffer values.</param>
            <param name="discardOldest">a value indicating whether to discard the oldest entries in the queue when it is full.</param>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBase.Property">
            <summary>
            Gets the property of the model to store the published value.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBase.NodeId">
            <summary>
            Gets the NodeId to monitor.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBase.AttributeId">
            <summary>
            Gets the attribute to monitor.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBase.IndexRange">
            <summary>
            Gets the range of array indexes to monitor.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBase.MonitoringMode">
            <summary>
            Gets the monitoring mode.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBase.SamplingInterval">
            <summary>
            Gets the sampling interval.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBase.Filter">
            <summary>
            Gets the filter used by the server to select values to return.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBase.QueueSize">
            <summary>
            Gets the length of the queue used by the server to buffer values.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBase.DiscardOldest">
            <summary>
            Gets a value indicating whether to discard the oldest entries in the queue when it is full.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBase.ClientId">
            <summary>
            Gets the identifier assigned by the client.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBase.ServerId">
            <summary>
            Gets the identifier assigned by the server.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemBase.StatusCode">
            <summary>
            Gets the latest status code assigned by the server.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.DataValueMonitoredItem">
            <summary>
            Subscribes to data changes of an attribute of a node.
            Sets the published value in a property of type DataValue.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.ValueMonitoredItem">
            <summary>
            Subscribes to data changes of an attribute of a node.
            Unwraps the published value and sets it in a property.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.DataValueQueueMonitoredItem">
            <summary>
            Subscribes to data changes of an attribute of a node.
            Enqueues the published value to an <see cref="T:Workstation.Collections.ObservableQueue`1"/>.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.EventMonitoredItem">
            <summary>
            Subscribes to events of an attribute of a node.
            Sets the published event in a property of type BaseEvent or subtype.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.EventQueueMonitoredItem`1">
            <summary>
            Subscribes to events of an attribute of a node.
            Enqueues the published event to an <see cref="T:Workstation.Collections.ObservableQueue`1"/>.
            </summary>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.MonitoredItemCollection">
            <summary>
            A collection of <see cref="T:Workstation.ServiceModel.Ua.MonitoredItemBase"/>.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.MonitoredItemCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.MonitoredItemCollection"/> class.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.MonitoredItemCollection.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.MonitoredItemCollection"/> class.
            Attributes found in the given subscription are added to the collection.
            </summary>
            <param name="subscription">the instance that will be inspected for [MonitoredItem] attributes.</param>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemCollection.Item(System.String)">
            <summary>Gets the element with the specified name. </summary>
            <returns>The element with the specified name. If an element with the specified key is not found, an exception is thrown.</returns>
            <param name="name">The name of the element to get.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="name" /> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">An element with the specified name does not exist in the collection.</exception>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.MonitoredItemCollection.Item(System.UInt32)">
            <summary>Gets the element with the specified clientId. </summary>
            <returns>The element with the specified clientId. If an element with the specified key is not found, an exception is thrown.</returns>
            <param name="clientId">The clientId of the element to get.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="clientId" /> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">An element with the specified clientId does not exist in the collection.</exception>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.MonitoredItemCollection.TryGetValueByName(System.String,Workstation.ServiceModel.Ua.MonitoredItemBase@)">
            <summary>Gets the value associated with the specified name.</summary>
            <returns>true if the <see cref="T:Workstation.ServiceModel.Ua.MonitoredItemCollection" /> contains an element with the specified name; otherwise, false.</returns>
            <param name="name">The name of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.MonitoredItemCollection.TryGetValueByClientId(System.UInt32,Workstation.ServiceModel.Ua.MonitoredItemBase@)">
            <summary>Gets the value associated with the specified clientId.</summary>
            <returns>true if the <see cref="T:Workstation.ServiceModel.Ua.MonitoredItemCollection" /> contains an element with the specified clientId; otherwise, false.</returns>
            <param name="clientId">The clientId of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.MonitoredItemServiceSet.CreateMonitoredItemsAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.CreateMonitoredItemsRequest)">
            <summary>
            Creates and adds one or more MonitoredItems to a Subscription.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.CreateMonitoredItemsRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.CreateMonitoredItemsResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.MonitoredItemServiceSet.ModifyMonitoredItemsAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.ModifyMonitoredItemsRequest)">
            <summary>
            Modifies MonitoredItems of a Subscription.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.ModifyMonitoredItemsRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.ModifyMonitoredItemsResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.MonitoredItemServiceSet.SetMonitoringModeAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.SetMonitoringModeRequest)">
            <summary>
            Sets the monitoring mode for one or more MonitoredItems of a Subscription.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.SetMonitoringModeRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.SetMonitoringModeResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.MonitoredItemServiceSet.SetTriggeringAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.SetTriggeringRequest)">
            <summary>
            Creates and deletes triggering links for a triggering item.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.SetTriggeringRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.SetTriggeringResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.MonitoredItemServiceSet.DeleteMonitoredItemsAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.DeleteMonitoredItemsRequest)">
            <summary>
            Removes one or more MonitoredItems of a Subscription.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.DeleteMonitoredItemsRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.DeleteMonitoredItemsResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.NodeId.#ctor(System.UInt32,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.NodeId"/> class.
            </summary>
            <param name="identifier">the identifier for a node within a namespace</param>
            <param name="namespaceIndex">the index of the namespace in the NamespaceArray. An index of 0 corresponds to "http://opcfoundation.org/UA/".</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.NodeId.#ctor(System.String,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.NodeId"/> class.
            </summary>
            <param name="identifier">the identifier for a node within a namespace</param>
            <param name="namespaceIndex">the index of the namespace in the NamespaceArray. An index of 0 corresponds to "http://opcfoundation.org/UA/".</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.NodeId.#ctor(System.Guid,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.NodeId"/> class.
            </summary>
            <param name="identifier">the identifier for a node within a namespace</param>
            <param name="namespaceIndex">the index of the namespace in the NamespaceArray. An index of 0 corresponds to "http://opcfoundation.org/UA/".</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.NodeId.#ctor(System.Byte[],System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.NodeId"/> class.
            </summary>
            <param name="identifier">the identifier for a node within a namespace</param>
            <param name="namespaceIndex">the index of the namespace in the NamespaceArray. An index of 0 corresponds to "http://opcfoundation.org/UA/".</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.NodeManagementServiceSet.AddNodesAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.AddNodesRequest)">
            <summary>
            Adds one or more Nodes into the AddressSpace hierarchy.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.AddNodesRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.AddNodesResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.NodeManagementServiceSet.AddReferencesAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.AddReferencesRequest)">
            <summary>
            Adds one or more References to one or more Nodes.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.AddReferencesRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.AddReferencesResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.NodeManagementServiceSet.DeleteNodesAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.DeleteNodesRequest)">
            <summary>
            Deletes one or more Nodes from the AddressSpace.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.DeleteNodesRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.DeleteNodesResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.NodeManagementServiceSet.DeleteReferencesAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.DeleteReferencesRequest)">
            <summary>
            Deletes one or more References of a Node.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.DeleteReferencesRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.DeleteReferencesResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.QualifiedName.#ctor(System.String,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.QualifiedName"/> class.
            </summary>
            <param name="name">the text portion of the QualifiedName. </param>
            <param name="namespaceIndex">index that identifies the namespace that qualifies the name.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.QueryServiceSet.QueryFirstAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.QueryFirstRequest)">
            <summary>
            Issues a Query request to a View.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.QueryFirstRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.QueryFirstResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.QueryServiceSet.QueryNextAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.QueryNextRequest)">
            <summary>
            Requests the next set of Query responses, when the information is too large to be sent in a single response.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.QueryNextRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.QueryNextResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceExtensions.ToVariantArray(System.Object[])">
            <summary>
            Converts an array of objects to an array of <see cref="T:ConverterSystems.ServiceModel.Ua.Variant" />.
            </summary>
            <param name="array">The object array.</param>
            <returns>The <see cref="T:ConverterSystems.ServiceModel.Ua.Variant" /> array.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceExtensions.ToObjectArray(Workstation.ServiceModel.Ua.Variant[])">
            <summary>
            Converts an array of <see cref="T:ConverterSystems.ServiceModel.Ua.Variant" /> to an array of objects.
            </summary>
            <param name="array">The <see cref="T:ConverterSystems.ServiceModel.Ua.Variant" /> array.</param>
            <returns>The object array.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceExtensions.WithCancellation``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
            <summary>
            Wraps a task with one that may complete as cancelled based on a cancellation token,
            allowing someone to await a task but be able to break out early by cancelling the token.
            </summary>
            <typeparam name="T">The type of value returned by the task.</typeparam>
            <param name="task">The task to wrap.</param>
            <param name="cancellationToken">The token that can be canceled to break out of the await.</param>
            <returns>The wrapping task.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceExtensions.WithCancellation(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Wraps a task with one that may complete as cancelled based on a cancellation token,
            allowing someone to await a task but be able to break out early by cancelling the token.
            </summary>
            <param name="task">The task to wrap.</param>
            <param name="cancellationToken">The token that can be canceled to break out of the await.</param>
            <returns>The wrapping task.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceExtensions.WithTimeoutAfter``1(System.Threading.Tasks.Task{``0},System.Int32)">
            <summary>
            Wraps a task with one that may complete as faulted based on a timeout,
            allowing someone to await a task but be able to break out early by a timeout.
            </summary>
            <typeparam name="T">The type of value returned by the task.</typeparam>
            <param name="task">The task to wrap.</param>
            <param name="millisecondsTimeout">The number of milliseconds to.</param>
            <returns>The wrapping task.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceExtensions.WithTimeoutAfter(System.Threading.Tasks.Task,System.Int32)">
            <summary>
            Wraps a task with one that may complete as faulted based on a timeout,
            allowing someone to await a task but be able to break out early by a timeout.
            </summary>
            <param name="task">The task to wrap.</param>
            <param name="millisecondsTimeout">The number of milliseconds to.</param>
            <returns>The wrapping task.</returns>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.ServiceResult">
            <summary>
            A class that combines the status code and diagnostic info structures.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceResult.#ctor(Workstation.ServiceModel.Ua.StatusCode,System.String,System.String,Workstation.ServiceModel.Ua.LocalizedText,System.String,Workstation.ServiceModel.Ua.ServiceResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.ServiceResult"/> class.
            </summary>
            <param name="code">A code.</param>
            <param name="symbolicId">A symbolicId.</param>
            <param name="namespaceUri">A namespaceUri.</param>
            <param name="localizedText">A localizedText.</param>
            <param name="additionalInfo">AdditionalInfo.</param>
            <param name="innerResult">An innerResult</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceResult.#ctor(Workstation.ServiceModel.Ua.StatusCode,Workstation.ServiceModel.Ua.DiagnosticInfo,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.ServiceResult"/> class.
            </summary>
            <param name="code">A code.</param>
            <param name="diagnosticInfo">A diagnostic info.</param>
            <param name="stringTable">A string table.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceResult.#ctor(Workstation.ServiceModel.Ua.StatusCode,System.Int32,Workstation.ServiceModel.Ua.DiagnosticInfo[],System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.ServiceResult"/> class.
            </summary>
            <param name="code">A code.</param>
            <param name="index">An index.</param>
            <param name="diagnosticInfos">A diagnostic info array.</param>
            <param name="stringTable">A string table.</param>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.ServiceResult.StatusCode">
            <summary>
            Gets the status code associated with the result.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.ServiceResult.NamespaceUri">
            <summary>
            Gets the namespace that qualifies symbolic identifier.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.ServiceResult.SymbolicId">
            <summary>
            Gets the qualified name of the symbolic identifier associated with the status code.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.ServiceResult.LocalizedText">
            <summary>
            Gets the localized description for the status code.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.ServiceResult.AdditionalInfo">
            <summary>
            Gets additional diagnostic/debugging information associated with the operation.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.ServiceResult.InnerResult">
            <summary>
            Gets nested error information.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceResult.op_Implicit(System.UInt32)~Workstation.ServiceModel.Ua.ServiceResult">
            <summary>
            Converts a 32-bit code a ServiceResult object.
            </summary>
            <returns>A ServiceResult.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceResult.op_Implicit(Workstation.ServiceModel.Ua.StatusCode)~Workstation.ServiceModel.Ua.ServiceResult">
            <summary>
            Converts a StatusCode a ServiceResult object.
            </summary>
            <returns>A ServiceResult.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceResult.IsGood(Workstation.ServiceModel.Ua.ServiceResult)">
            <summary>
            Returns true if the status code is good.
            </summary>
            <returns>A bool.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceResult.IsUncertain(Workstation.ServiceModel.Ua.ServiceResult)">
            <summary>
            Returns true if the status code is uncertain.
            </summary>
            <returns>A bool.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceResult.IsBad(Workstation.ServiceModel.Ua.ServiceResult)">
            <summary>
            Returns true if the status code is bad.
            </summary>
            <returns>A bool.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceResult.ToString">
            <summary>
            Converts the value to a human readable string.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ServiceResult.LookupString(System.Collections.Generic.IList{System.String},System.Int32)">
            <summary>
            Looks up a string in a string table.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.ServiceResultException.StatusCode">
            <summary>
            Gets the StatusCode of the ServiceResult.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SessionServiceSet.CreateSessionAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.CreateSessionRequest)">
            <summary>
            Creates a Session.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.CreateSessionRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.CreateSessionResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SessionServiceSet.ActivateSessionAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.ActivateSessionRequest)">
            <summary>
            Activates a session.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.ActivateSessionRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.ActivateSessionResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SessionServiceSet.CloseSessionAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.CloseSessionRequest)">
            <summary>
            Closes a session.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.CloseSessionRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.CloseSessionResponse"/>.</returns>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.Subscription">
            <summary>
            A collection of items to be monitored by the OPC UA server.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Subscription.#ctor(Workstation.ServiceModel.Ua.UaTcpSessionClient,System.Object,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.Subscription"/> class.
            </summary>
            <param name="session">The session client.</param>
            <param name="target">The target model.</param>
            <param name="loggerFactory">The logger factory.</param>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Subscription.PublishingInterval">
            <summary>
            Gets the publishing interval.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Subscription.KeepAliveCount">
            <summary>
            Gets the number of PublishingIntervals before the server should return an empty Publish response.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Subscription.LifetimeCount">
            <summary>
            Gets the number of PublishingIntervals before the server should delete the subscription.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Subscription.PublishingEnabled">
            <summary>
            Gets or sets a value indicating whether publishing is enabled.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Subscription.MonitoredItems">
            <summary>
            Gets the collection of items to monitor.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Subscription.Session">
            <summary>
            Gets the UaTcpSessionClient.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Subscription.Target">
            <summary>
            Gets the target.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Subscription.SubscriptionId">
            <summary>
            Gets the SubscriptionId assigned by the server.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.Subscription.Logger">
            <summary>
            Gets the current logger
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Subscription.FromModel(System.Object)">
            <summary>
            Gets the <see cref="T:Workstation.ServiceModel.Ua.Subscription"/> attached to this model.
            </summary>
            <param name="model">the model.</param>
            <returns>Returns the attached <see cref="T:Workstation.ServiceModel.Ua.Subscription"/> or null.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Subscription.Dispose">
            <summary>
            Disposes the subscription.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Subscription.OnPublishResponse(Workstation.ServiceModel.Ua.PublishResponse)">
            <summary>
            Handles PublishResponse message.
            </summary>
            <param name="response">The publish response.</param>
            <returns>False if target reference is not alive.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.Subscription.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles PropertyChanged event. If the property is associated with a MonitoredItem, writes the property value to the node of the server.
            </summary>
            <param name="sender">the sender.</param>
            <param name="e">the event.</param>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.SubscriptionAttribute">
            <summary>
            Specifies the Subscription that will be created for this viewmodel.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionAttribute.#ctor(System.Double,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.SubscriptionAttribute"/> class.
            </summary>
            <param name="publishingInterval">the publishing interval.</param>
            <param name="keepAliveCount">the number of PublishingIntervals before the server should return an empty Publish response.</param>
            <param name="lifetimeCount">the number of PublishingIntervals before the server should delete the subscription.</param>
            <param name="publishingEnabled">whether publishing is enabled.</param>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.SubscriptionAttribute.PublishingInterval">
            <summary>
            Gets the publishing interval.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.SubscriptionAttribute.KeepAliveCount">
            <summary>
            Gets the number of PublishingIntervals before the server should return an empty Publish response.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.SubscriptionAttribute.LifetimeCount">
            <summary>
            Gets the number of PublishingIntervals before the server should delete the subscription.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.SubscriptionAttribute.PublishingEnabled">
            <summary>
            Gets a value indicating whether publishing is enabled.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionServiceSet.CreateSubscriptionAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.CreateSubscriptionRequest)">
            <summary>
            Creates a Subscription.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.CreateSubscriptionRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.CreateSubscriptionResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionServiceSet.ModifySubscriptionAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.ModifySubscriptionRequest)">
            <summary>
            Modifies a Subscription.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.ModifySubscriptionRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.ModifySubscriptionResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionServiceSet.SetPublishingModeAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.SetPublishingModeRequest)">
            <summary>
            Enables sending of Notifications on one or more Subscriptions.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.SetPublishingModeRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.SetPublishingModeResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionServiceSet.PublishAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.PublishRequest)">
            <summary>
            Requests the Server to return a NotificationMessage or a keep-alive Message.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.PublishRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.PublishResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionServiceSet.RepublishAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.RepublishRequest)">
            <summary>
            Requests the Server to republish a NotificationMessage from its retransmission queue.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.RepublishRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.RepublishResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionServiceSet.TransferSubscriptionsAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.TransferSubscriptionsRequest)">
            <summary>
            Transfers a Subscription and its MonitoredItems from one Session to another.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.TransferSubscriptionsRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.TransferSubscriptionsResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.SubscriptionServiceSet.DeleteSubscriptionsAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.DeleteSubscriptionsRequest)">
            <summary>
            Deletes one or more Subscriptions.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.DeleteSubscriptionsRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.DeleteSubscriptionsResponse"/>.</returns>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.UaTcpDiscoveryClient">
            <summary>
            A client for discovery of remote OPC UA servers and their endpoints.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpDiscoveryClient.RemoteEndpoint">
            <summary>
            Gets the <see cref="T:Workstation.ServiceModel.Ua.EndpointDescription"/> of the remote application.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpDiscoveryClient.State">
            <summary>
            Gets a value that indicates the current state of the communication object.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpDiscoveryClient.FindServersAsync(Workstation.ServiceModel.Ua.FindServersRequest)">
            <summary>
            This Service returns the Servers known to a Server or Discovery Server.
            </summary>
            <param name="request">a request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpDiscoveryClient.GetEndpointsAsync(Workstation.ServiceModel.Ua.GetEndpointsRequest)">
            <summary>
            This Service returns the Endpoints supported by a Server and all of the configuration information required to establish a SecureChannel and a Session.
            </summary>
            <param name="request">a request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpDiscoveryClient.AbortAsync(System.Threading.CancellationToken)">
            <summary>
            Causes a communication object to transition immediately from its current state into the closing state.
            </summary>
            <param name="token">The <see cref="T:ConverterSystems.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpDiscoveryClient.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Causes a communication object to transition from its current state into the closed state.
            </summary>
            <param name="token">The <see cref="T:ConverterSystems.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpDiscoveryClient.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            Causes a communication object to transition from the created state into the opened state.
            </summary>
            <param name="token">The <see cref="T:ConverterSystems.Threading.CancellationToken" /> that notifies when the task should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.UaTcpSessionClient">
            <summary>
            A client for browsing, reading, writing and subscribing to nodes of an OPC UA server.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpSessionClient.#ctor(Workstation.ServiceModel.Ua.ApplicationDescription,Workstation.ServiceModel.Ua.ICertificateStore,System.Func{Workstation.ServiceModel.Ua.EndpointDescription,System.Threading.Tasks.Task{Workstation.ServiceModel.Ua.IUserIdentity}},Workstation.ServiceModel.Ua.EndpointDescription,Microsoft.Extensions.Logging.ILoggerFactory,System.Double,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.UaTcpSessionClient"/> class.
            </summary>
            <param name="localDescription">The <see cref="T:Workstation.ServiceModel.Ua.ApplicationDescription"/> of the local application.</param>
            <param name="certificateStore">The local certificate store.</param>
            <param name="userIdentityProvider">An asynchronous function that provides the user identity. Provide an <see cref="T:Workstation.ServiceModel.Ua.AnonymousIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.UserNameIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.IssuedIdentity"/> or <see cref="T:Workstation.ServiceModel.Ua.X509Identity"/>.</param>
            <param name="remoteEndpoint">The <see cref="T:Workstation.ServiceModel.Ua.EndpointDescription"/> of the remote application. Obtained from a prior call to UaTcpDiscoveryClient.GetEndpoints.</param>
            <param name="loggerFactory">A logger factory.</param>
            <param name="sessionTimeout">The requested number of milliseconds that a session may be unused before being closed by the server.</param>
            <param name="timeoutHint">The default number of milliseconds that may elapse before an operation is cancelled by the service.</param>
            <param name="diagnosticsHint">The default diagnostics flags to be requested by the service.</param>
            <param name="localReceiveBufferSize">The size of the receive buffer.</param>
            <param name="localSendBufferSize">The size of the send buffer.</param>
            <param name="localMaxMessageSize">The maximum total size of a message.</param>
            <param name="localMaxChunkCount">The maximum number of message chunks.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpSessionClient.#ctor(Workstation.ServiceModel.Ua.ApplicationDescription,Workstation.ServiceModel.Ua.ICertificateStore,System.Func{Workstation.ServiceModel.Ua.EndpointDescription,System.Threading.Tasks.Task{Workstation.ServiceModel.Ua.IUserIdentity}},System.String,Microsoft.Extensions.Logging.ILoggerFactory,System.Double,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.ServiceModel.Ua.UaTcpSessionClient"/> class.
            </summary>
            <param name="localDescription">The <see cref="T:Workstation.ServiceModel.Ua.ApplicationDescription"/> of the local application.</param>
            <param name="certificateStore">The local certificate store.</param>
            <param name="userIdentityProvider">An asynchronous function that provides the user identity. Provide an <see cref="T:Workstation.ServiceModel.Ua.AnonymousIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.UserNameIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.IssuedIdentity"/> or <see cref="T:Workstation.ServiceModel.Ua.X509Identity"/>.</param>
            <param name="endpointUrl">The url of the endpoint of the remote application</param>
            <param name="loggerFactory">A logger factory.</param>
            <param name="sessionTimeout">The requested number of milliseconds that a session may be unused before being closed by the server.</param>
            <param name="timeoutHint">The default number of milliseconds that may elapse before an operation is cancelled by the service.</param>
            <param name="diagnosticsHint">The default diagnostics flags to be requested by the service.</param>
            <param name="localReceiveBufferSize">The size of the receive buffer.</param>
            <param name="localSendBufferSize">The size of the send buffer.</param>
            <param name="localMaxMessageSize">The maximum total size of a message.</param>
            <param name="localMaxChunkCount">The maximum number of message chunks.</param>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpSessionClient.LocalDescription">
            <summary>
            Gets the <see cref="T:Workstation.ServiceModel.Ua.ApplicationDescription"/> of the local application.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpSessionClient.CertificateStore">
            <summary>
            Gets the local certificate store.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpSessionClient.UserIdentityProvider">
            <summary>
            Gets an asynchronous function that provides the identity of the user. Supports <see cref="T:Workstation.ServiceModel.Ua.AnonymousIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.UserNameIdentity"/>, <see cref="T:Workstation.ServiceModel.Ua.IssuedIdentity"/> and <see cref="T:Workstation.ServiceModel.Ua.X509Identity"/>.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpSessionClient.RemoteEndpoint">
            <summary>
            Gets the <see cref="T:Workstation.ServiceModel.Ua.EndpointDescription"/> of the remote application.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpSessionClient.SessionTimeout">
            <summary>
            Gets the requested number of milliseconds that a session may be unused before being closed by the server.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpSessionClient.TimeoutHint">
            <summary>
            Gets the default number of milliseconds that may elapse before an operation is cancelled by the service.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpSessionClient.DiagnosticsHint">
            <summary>
            Gets the default diagnostics flags to be requested by the service.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpSessionClient.LocalReceiveBufferSize">
            <summary>
            Gets the size of the receive buffer.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpSessionClient.LocalSendBufferSize">
            <summary>
            Gets the size of the send buffer.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpSessionClient.LocalMaxMessageSize">
            <summary>
            Gets the maximum total size of a message.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpSessionClient.LocalMaxChunkCount">
            <summary>
            Gets the maximum number of message chunks.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpSessionClient.NamespaceUris">
            <summary>
            Gets the NamespaceUris.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpSessionClient.ServerUris">
            <summary>
            Gets the ServerUris.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpSessionClient.State">
            <summary>
            Gets the state of communication channel.
            </summary>
        </member>
        <member name="P:Workstation.ServiceModel.Ua.UaTcpSessionClient.Logger">
            <summary>
            Gets the current logger
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpSessionClient.FromModel(System.Object)">
            <summary>
            Gets the <see cref="T:Workstation.ServiceModel.Ua.UaTcpSessionClient"/> attached to this model.
            </summary>
            <param name="model">the model.</param>
            <returns>Returns the attached <see cref="T:Workstation.ServiceModel.Ua.UaTcpSessionClient"/> or null.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpSessionClient.Subscribe(System.Object)">
            <summary>
            Subscribes for data change and event notifications from the server.
            </summary>
            <param name="model">The model.</param>
            <returns>Returns a disposable token.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpSessionClient.RequestAsync(Workstation.ServiceModel.Ua.IServiceRequest)">
            <summary>
            Sends a service request.
            </summary>
            <param name="request">An <see cref="T:Workstation.ServiceModel.Ua.IServiceRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns an <see cref="T:Workstation.ServiceModel.Ua.IServiceResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpSessionClient.SuspendAsync">
            <summary>
            Suspends the communication channel to the remote endpoint.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that suspends the communication channel.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpSessionClient.Resume">
            <summary>
            Resumes the communication channel to the remote endpoint.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpSessionClient.Dispose">
            <summary>
            Closes the communication channel to the remote endpoint.
            </summary>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpSessionClient.Dispose(System.Boolean)">
            <summary>
            Closes the communication channel to the remote endpoint.
            </summary>
            <param name="disposing">If true, then dispose managed resources.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpSessionClient.StateMachineAsync(System.Threading.CancellationToken)">
            <summary>
            The state machine manages the state of the communications channel.
            </summary>
            <param name="token">A cancellation token.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpSessionClient.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            Opens a session with the remote endpoint.
            </summary>
            <param name="token">A cancellation token.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpSessionClient.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Closes the session with the remote endpoint.
            </summary>
            <param name="token">A cancellation token.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpSessionClient.AutoCreateSubscriptionsAsync(System.Threading.CancellationToken)">
            <summary>
            Creates the subscriptions on the server.
            </summary>
            <param name="token">A cancellation token. </param>
            <returns>A task.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpSessionClient.PublishAsync(System.Threading.CancellationToken)">
            <summary>
            Sends publish requests to the server.
            </summary>
            <param name="token">A cancellation token.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpSessionClient.WhenChannelClosingAsync(System.Threading.CancellationToken)">
            <summary>
            Waits until the communication channel is closing, closed or faulted.
            </summary>
            <param name="token">A cancellation token. </param>
            <returns>A task.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpSessionClient.OnPublishResponse(Workstation.ServiceModel.Ua.PublishResponse)">
            <summary>
            Receive PublishResponse message.
            </summary>
            <param name="response">The publish response.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpSessionClient.UpdateTimestamp(Workstation.ServiceModel.Ua.IServiceRequest)">
            <summary>
            Validates the request's header and updates the timestamp.
            </summary>
            <param name="request">The service request</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.UaTcpSessionClient.CancelRequest(System.Object)">
            <summary>
            Cancels the Request
            </summary>
            <param name="o">the ServiceTask.</param>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.VariantExtensions.GetValue(Workstation.ServiceModel.Ua.Variant)">
            <summary>
            Gets the value of the Variant, or the default value for the type.
            </summary>
            <param name="variant">The Variant.</param>
            <returns>The value if an instance of the specified Type, otherwise the Type's default value.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.VariantExtensions.GetValueOrDefault``1(Workstation.ServiceModel.Ua.Variant)">
            <summary>
            Gets the value of the Variant, or the default value for the type.
            </summary>
            <typeparam name="T">The expected type.</typeparam>
            <param name="variant">The Variant.</param>
            <returns>The value if an instance of the specified Type, otherwise the Type's default value.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.VariantExtensions.GetValueOrDefault``1(Workstation.ServiceModel.Ua.Variant,``0)">
            <summary>
            Gets the value of the Variant, or the specified default value.
            </summary>
            <typeparam name="T">The expected type.</typeparam>
            <param name="variant">A Variant</param>
            <param name="defaultValue">A default value.</param>
            <returns>The value if an instance of the specified Type, otherwise the specified default value.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.VariantExtensions.GetValueOrDefault(Workstation.ServiceModel.Ua.Variant,System.Type)">
            <summary>
            Gets the value of the Variant, or the default value of the type.
            </summary>
            <param name="variant">A Variant</param>
            <param name="dataType">A data type.</param>
            <returns>The value if an instance of the specified Type, otherwise the Type's default value.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.VariantExtensions.GetValueOrDefault(Workstation.ServiceModel.Ua.Variant,System.Type,System.Object)">
            <summary>
            Gets the value of the Variant, or the type's default value.
            </summary>
            <param name="variant">A Variant</param>
            <param name="dataType">The expected type.</param>
            <param name="defaultValue">A default value.</param>
            <returns>The value if an instance of the specified Type, otherwise the specified default value.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ViewServiceSet.BrowseAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.BrowseRequest)">
            <summary>
            Discovers the References of a specified Node.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.BrowseRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.BrowseResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ViewServiceSet.BrowseNextAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.BrowseNextRequest)">
            <summary>
            Requests the next set of Browse responses, when the information is too large to be sent in a single response.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.BrowseNextRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.BrowseNextResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ViewServiceSet.TranslateBrowsePathsToNodeIdsAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.TranslateBrowsePathsToNodeIdsRequest)">
            <summary>
            Translates one or more browse paths to NodeIds.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.TranslateBrowsePathsToNodeIdsRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.TranslateBrowsePathsToNodeIdsResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ViewServiceSet.RegisterNodesAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.RegisterNodesRequest)">
            <summary>
            Registers the Nodes that will be accessed repeatedly (e.g. Write, Call).
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.RegisterNodesRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.RegisterNodesResponse"/>.</returns>
        </member>
        <member name="M:Workstation.ServiceModel.Ua.ViewServiceSet.UnregisterNodesAsync(Workstation.ServiceModel.Ua.Channels.IRequestChannel,Workstation.ServiceModel.Ua.UnregisterNodesRequest)">
            <summary>
            Unregisters NodeIds that have been obtained via the RegisterNodes service.
            </summary>
            <param name="channel">A instance of <see cref="T:Workstation.ServiceModel.Ua.Channels.IRequestChannel"/>.</param>
            <param name="request">A <see cref="T:Workstation.ServiceModel.Ua.UnregisterNodesRequest"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation that returns a <see cref="T:Workstation.ServiceModel.Ua.UnregisterNodesResponse"/>.</returns>
        </member>
        <member name="T:Workstation.ServiceModel.Ua.XmlEncodingIdAttribute">
            <summary>
            Attribute for classes of type IEncodable to indicate the xml encoding id.
            </summary>
        </member>
        <member name="T:Workstation.Collections.ErrorsContainer`1">
            <summary>
            Manages validation errors for an object, notifying when the error state changes.
            </summary>
            <typeparam name="T">The type of the error object.</typeparam>
        </member>
        <member name="M:Workstation.Collections.ErrorsContainer`1.#ctor(System.Action{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.Collections.ErrorsContainer`1"/> class.
            </summary>
            <param name="raiseErrorsChanged">The action that invoked if when errors are added for an object./>
            event.</param>
        </member>
        <member name="P:Workstation.Collections.ErrorsContainer`1.HasErrors">
            <summary>
            Gets a value indicating whether the object has validation errors.
            </summary>
        </member>
        <member name="M:Workstation.Collections.ErrorsContainer`1.GetErrors(System.String)">
            <summary>
            Gets the validation errors for a specified property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns>The validation errors of type <typeparamref name="T"/> for the property.</returns>
        </member>
        <member name="M:Workstation.Collections.ErrorsContainer`1.ClearErrors(System.String)">
            <summary>
            Clears the errors for a property.
            </summary>
            <param name="propertyName">The name of th property for which to clear errors.</param>
            <example>
                container.ClearErrors("SomeProperty");
            </example>
        </member>
        <member name="M:Workstation.Collections.ErrorsContainer`1.SetErrors(System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sets the validation errors for the specified property.
            </summary>
            <remarks>
            If a change is detected then the errors changed event is raised.
            </remarks>
            <param name="propertyName">The name of the property.</param>
            <param name="newValidationResults">The new validation errors.</param>
        </member>
        <member name="T:Workstation.Collections.ObservableQueue`1">
            <summary>
            Represents a first-in, first-out collection that implements INotifyCollectionChanged.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
        </member>
        <member name="M:Workstation.Collections.ObservableQueue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.Collections.ObservableQueue`1"/> class.
            </summary>
        </member>
        <member name="M:Workstation.Collections.ObservableQueue`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Workstation.Collections.ObservableQueue`1"/> class.
            </summary>
            <param name="capacity">The number of elements that the queue can initially store.</param>
            <param name="isFixedSize">If true, older elements are discarded.</param>
        </member>
        <member name="E:Workstation.Collections.ObservableQueue`1.CollectionChanged">
            <summary>
            Occurs when an item is added, removed, changed, moved, or the entire list is refreshed.
            </summary>
        </member>
        <member name="E:Workstation.Collections.ObservableQueue`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Workstation.Collections.ObservableQueue`1.Clear">
            <summary>
            Removes all objects from the queue.
            </summary>
        </member>
        <member name="M:Workstation.Collections.ObservableQueue`1.Dequeue">
            <summary>
            Removes and returns the object at the beginning of the queue.
            </summary>
            <returns>The object that is removed from the beginning of the queue.</returns>
        </member>
        <member name="M:Workstation.Collections.ObservableQueue`1.Enqueue(`0)">
            <summary>
            Adds an object to the end of the queue.
            </summary>
            <param name="item">The object to add to the queue.</param>
        </member>
        <member name="M:Workstation.Collections.ObservableQueue`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the CollectionChanged event with the provided arguments.
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="M:Workstation.Collections.ObservableQueue`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event with the provided arguments.
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="T:Microsoft.IO.RecyclableMemoryStreamManager">
            <summary>
            Manages pools of RecyclableMemoryStream objects.
            </summary>
            <remarks>
            There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams
            as they write more data.
            
            For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all
            multiples of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer
            usage. There should be far fewer 8 MB buffers than 1 MB buffers, for example.
            </remarks>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.Default">
            <summary>
            Gets the default instance.
            </summary>
        </member>
        <member name="T:Microsoft.IO.RecyclableMemoryStreamManager.EventHandler">
            <summary>
            Generic delegate for handling events without any arguments.
            </summary>
        </member>
        <member name="T:Microsoft.IO.RecyclableMemoryStreamManager.LargeBufferDiscardedEventHandler">
            <summary>
            Delegate for handling large buffer discard reports.
            </summary>
            <param name="reason">Reason the buffer was discarded.</param>
        </member>
        <member name="T:Microsoft.IO.RecyclableMemoryStreamManager.StreamLengthReportHandler">
            <summary>
            Delegate for handling reports of stream size when streams are allocated
            </summary>
            <param name="bytes">Bytes allocated.</param>
        </member>
        <member name="T:Microsoft.IO.RecyclableMemoryStreamManager.UsageReportEventHandler">
            <summary>
            Delegate for handling periodic reporting of memory use statistics.
            </summary>
            <param name="smallPoolInUseBytes">Bytes currently in use in the small pool.</param>
            <param name="smallPoolFreeBytes">Bytes currently free in the small pool.</param>
            <param name="largePoolInUseBytes">Bytes currently in use in the large pool.</param>
            <param name="largePoolFreeBytes">Bytes currently free in the large pool.</param>
        </member>
        <member name="F:Microsoft.IO.RecyclableMemoryStreamManager.largePools">
            <summary>
            pools[0] = 1x largeBufferMultiple buffers
            pools[1] = 2x largeBufferMultiple buffers
            etc., up to maximumBufferSize
            </summary>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStreamManager.#ctor">
            <summary>
            Initializes the memory manager with the default block/buffer specifications.
            </summary>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStreamManager.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the memory manager with the given block requiredSize.
            </summary>
            <param name="blockSize">Size of each block that is pooled. Must be > 0.</param>
            <param name="largeBufferMultiple">Each large buffer will be a multiple of this value.</param>
            <param name="maximumBufferSize">Buffers larger than this are not pooled</param>
            <exception cref="T:System.ArgumentOutOfRangeException">blockSize is not a positive number, or largeBufferMultiple is not a positive number, or maximumBufferSize is less than blockSize.</exception>
            <exception cref="T:System.ArgumentException">maximumBufferSize is not a multiple of largeBufferMultiple</exception>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.BlockSize">
            <summary>
            The size of each block. It must be set at creation and cannot be changed.
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.LargeBufferMultiple">
            <summary>
            All buffers are multiples of this number. It must be set at creation and cannot be changed.
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.MaximumBufferSize">
            <summary>
            Gets or sets the maximum buffer size.
            </summary>
            <remarks>Any buffer that is returned to the pool that is larger than this will be
            discarded and garbage collected.</remarks>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.SmallPoolFreeSize">
            <summary>
            Number of bytes in small pool not currently in use
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.SmallPoolInUseSize">
            <summary>
            Number of bytes currently in use by stream from the small pool
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.LargePoolFreeSize">
            <summary>
            Number of bytes in large pool not currently in use
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.LargePoolInUseSize">
            <summary>
            Number of bytes currently in use by streams from the large pool
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.SmallBlocksFree">
            <summary>
            How many blocks are in the small pool
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.LargeBuffersFree">
            <summary>
            How many buffers are in the large pool
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.MaximumFreeSmallPoolBytes">
            <summary>
            How many bytes of small free blocks to allow before we start dropping
            those returned to us.
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.MaximumFreeLargePoolBytes">
            <summary>
            How many bytes of large free buffers to allow before we start dropping
            those returned to us.
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.MaximumStreamCapacity">
            <summary>
            Maximum stream capacity in bytes. Attempts to set a larger capacity will
            result in an exception.
            </summary>
            <remarks>A value of 0 indicates no limit.</remarks>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.GenerateCallStacks">
            <summary>
            Whether to save callstacks for stream allocations. This can help in debugging.
            It should NEVER be turned on generally in production.
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStreamManager.AggressiveBufferReturn">
            <summary>
            Whether dirty buffers can be immediately returned to the buffer pool. E.g. when GetBuffer() is called on
            a stream and creates a single large buffer, if this setting is enabled, the other blocks will be returned
            to the buffer pool immediately.
            Note when enabling this setting that the user is responsible for ensuring that any buffer previously
            retrieved from a stream which is subsequently modified is not used after modification (as it may no longer
            be valid).
            </summary>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStreamManager.GetBlock">
            <summary>
            Removes and returns a single block from the pool.
            </summary>
            <returns>A byte[] array</returns>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStreamManager.GetLargeBuffer(System.Int32,System.String)">
            <summary>
            Returns a buffer of arbitrary size from the large buffer pool. This buffer
            will be at least the requiredSize and always be a multiple of largeBufferMultiple.
            </summary>
            <param name="requiredSize">The minimum length of the buffer</param>
            <param name="tag">The tag of the stream returning this buffer, for logging if necessary.</param>
            <returns>A buffer of at least the required size.</returns>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStreamManager.ReturnLargeBuffer(System.Byte[],System.String)">
            <summary>
            Returns the buffer to the large pool
            </summary>
            <param name="buffer">The buffer to return.</param>
            <param name="tag">The tag of the stream returning this buffer, for logging if necessary.</param>
            <exception cref="T:System.ArgumentNullException">buffer is null</exception>
            <exception cref="T:System.ArgumentException">buffer.Length is not a multiple of LargeBufferMultiple (it did not originate from this pool)</exception>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStreamManager.ReturnBlocks(System.Collections.Generic.ICollection{System.Byte[]},System.String)">
            <summary>
            Returns the blocks to the pool
            </summary>
            <param name="blocks">Collection of blocks to return to the pool</param>
            <param name="tag">The tag of the stream returning these blocks, for logging if necessary.</param>
            <exception cref="T:System.ArgumentNullException">blocks is null</exception>
            <exception cref="T:System.ArgumentException">blocks contains buffers that are the wrong size (or null) for this memory manager</exception>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStreamManager.GetStream">
            <summary>
            Retrieve a new MemoryStream object with no tag and a default initial capacity.
            </summary>
            <returns>A MemoryStream.</returns>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStreamManager.GetStream(System.String)">
            <summary>
            Retrieve a new MemoryStream object with the given tag and a default initial capacity.
            </summary>
            <param name="tag">A tag which can be used to track the source of the stream.</param>
            <returns>A MemoryStream.</returns>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStreamManager.GetStream(System.String,System.Int32)">
            <summary>
            Retrieve a new MemoryStream object with the given tag and at least the given capacity.
            </summary>
            <param name="tag">A tag which can be used to track the source of the stream.</param>
            <param name="requiredSize">The minimum desired capacity for the stream.</param>
            <returns>A MemoryStream.</returns>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStreamManager.GetStream(System.String,System.Int32,System.Boolean)">
            <summary>
            Retrieve a new MemoryStream object with the given tag and at least the given capacity, possibly using
            a single continugous underlying buffer.
            </summary>
            <remarks>Retrieving a MemoryStream which provides a single contiguous buffer can be useful in situations
            where the initial size is known and it is desirable to avoid copying data between the smaller underlying
            buffers to a single large one. This is most helpful when you know that you will always call GetBuffer
            on the underlying stream.</remarks>
            <param name="tag">A tag which can be used to track the source of the stream.</param>
            <param name="requiredSize">The minimum desired capacity for the stream.</param>
            <param name="asContiguousBuffer">Whether to attempt to use a single contiguous buffer.</param>
            <returns>A MemoryStream.</returns>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStreamManager.GetStream(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Retrieve a new MemoryStream object with the given tag and with contents copied from the provided
            buffer. The provided buffer is not wrapped or used after construction.
            </summary>
            <remarks>The new stream's position is set to the beginning of the stream when returned.</remarks>
            <param name="tag">A tag which can be used to track the source of the stream.</param>
            <param name="buffer">The byte buffer to copy data from.</param>
            <param name="offset">The offset from the start of the buffer to copy from.</param>
            <param name="count">The number of bytes to copy from the buffer.</param>
            <returns>A MemoryStream.</returns>
        </member>
        <member name="E:Microsoft.IO.RecyclableMemoryStreamManager.BlockCreated">
            <summary>
            Triggered when a new block is created.
            </summary>
        </member>
        <member name="E:Microsoft.IO.RecyclableMemoryStreamManager.BlockDiscarded">
            <summary>
            Triggered when a new block is created.
            </summary>
        </member>
        <member name="E:Microsoft.IO.RecyclableMemoryStreamManager.LargeBufferCreated">
            <summary>
            Triggered when a new large buffer is created.
            </summary>
        </member>
        <member name="E:Microsoft.IO.RecyclableMemoryStreamManager.StreamCreated">
            <summary>
            Triggered when a new stream is created.
            </summary>
        </member>
        <member name="E:Microsoft.IO.RecyclableMemoryStreamManager.StreamDisposed">
            <summary>
            Triggered when a stream is disposed.
            </summary>
        </member>
        <member name="E:Microsoft.IO.RecyclableMemoryStreamManager.StreamFinalized">
            <summary>
            Triggered when a stream is finalized.
            </summary>
        </member>
        <member name="E:Microsoft.IO.RecyclableMemoryStreamManager.StreamLength">
            <summary>
            Triggered when a stream is finalized.
            </summary>
        </member>
        <member name="E:Microsoft.IO.RecyclableMemoryStreamManager.StreamConvertedToArray">
            <summary>
            Triggered when a user converts a stream to array.
            </summary>
        </member>
        <member name="E:Microsoft.IO.RecyclableMemoryStreamManager.LargeBufferDiscarded">
            <summary>
            Triggered when a large buffer is discarded, along with the reason for the discard.
            </summary>
        </member>
        <member name="E:Microsoft.IO.RecyclableMemoryStreamManager.UsageReport">
            <summary>
            Periodically triggered to report usage statistics.
            </summary>
        </member>
        <member name="T:Microsoft.IO.RecyclableMemoryStream">
            <summary>
            MemoryStream implementation that deals with pooling and managing memory streams which use potentially large
            buffers.
            </summary>
            <remarks>
            This class works in tandem with the RecylableMemoryStreamManager to supply MemoryStream
            objects to callers, while avoiding these specific problems:
            1. LOH allocations - since all large buffers are pooled, they will never incur a Gen2 GC
            2. Memory waste - A standard memory stream doubles its size when it runs out of room. This
            leads to continual memory growth as each stream approaches the maximum allowed size.
            3. Memory copying - Each time a MemoryStream grows, all the bytes are copied into new buffers.
            This implementation only copies the bytes when GetBuffer is called.
            4. Memory fragmentation - By using homogeneous buffer sizes, it ensures that blocks of memory
            can be easily reused.
            
            The stream is implemented on top of a series of uniformly-sized blocks. As the stream's length grows,
            additional blocks are retrieved from the memory manager. It is these blocks that are pooled, not the stream
            object itself.
            
            The biggest wrinkle in this implementation is when GetBuffer() is called. This requires a single 
            contiguous buffer. If only a single block is in use, then that block is returned. If multiple blocks 
            are in use, we retrieve a larger buffer from the memory manager. These large buffers are also pooled, 
            split by size--they are multiples of a chunk size (1 MB by default).
            
            Once a large buffer is assigned to the stream the blocks are NEVER again used for this stream. All operations take place on the 
            large buffer. The large buffer can be replaced by a larger buffer from the pool as needed. All blocks and large buffers 
            are maintained in the stream until the stream is disposed (unless AggressiveBufferReturn is enabled in the stream manager).
            
            </remarks>
        </member>
        <member name="F:Microsoft.IO.RecyclableMemoryStream.blocks">
            <summary>
            All of these blocks must be the same size
            </summary>
        </member>
        <member name="F:Microsoft.IO.RecyclableMemoryStream.largeBuffer">
            <summary>
            This is only set by GetBuffer() if the necessary buffer is larger than a single block size, or on
            construction if the caller immediately requests a single large buffer.
            </summary>
            <remarks>If this field is non-null, it contains the concatenation of the bytes found in the individual
            blocks. Once it is created, this (or a larger) largeBuffer will be used for the life of the stream.
            </remarks>
        </member>
        <member name="F:Microsoft.IO.RecyclableMemoryStream.dirtyBuffers">
            <summary>
            This list is used to store buffers once they're replaced by something larger.
            This is for the cases where you have users of this class that may hold onto the buffers longer
            than they should and you want to prevent race conditions which could corrupt the data.
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStream.Id">
            <summary>
            Unique identifier for this stream across it's entire lifetime
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStream.Tag">
            <summary>
            A temporary identifier for the current usage of this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStream.MemoryManager">
            <summary>
            Gets the memory manager being used by this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStream.AllocationStack">
            <summary>
            Callstack of the constructor. It is only set if MemoryManager.GenerateCallStacks is true,
            which should only be in debugging situations.
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStream.DisposeStack">
            <summary>
            Callstack of the Dispose call. It is only set if MemoryManager.GenerateCallStacks is true,
            which should only be in debugging situations.
            </summary>
        </member>
        <member name="F:Microsoft.IO.RecyclableMemoryStream.byteBuffer">
            <summary>
            This buffer exists so that WriteByte can forward all of its calls to Write
            without creating a new byte[] buffer on every call.
            </summary>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.#ctor(Microsoft.IO.RecyclableMemoryStreamManager)">
            <summary>
            Allocate a new RecyclableMemoryStream object.
            </summary>
            <param name="memoryManager">The memory manager</param>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.#ctor(Microsoft.IO.RecyclableMemoryStreamManager,System.String)">
            <summary>
            Allocate a new RecyclableMemoryStream object
            </summary>
            <param name="memoryManager">The memory manager</param>
            <param name="tag">A string identifying this stream for logging and debugging purposes</param>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.#ctor(Microsoft.IO.RecyclableMemoryStreamManager,System.String,System.Int32)">
            <summary>
            Allocate a new RecyclableMemoryStream object
            </summary>
            <param name="memoryManager">The memory manager</param>
            <param name="tag">A string identifying this stream for logging and debugging purposes</param>
            <param name="requestedSize">The initial requested size to prevent future allocations</param>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.#ctor(Microsoft.IO.RecyclableMemoryStreamManager,System.String,System.Int32,System.Byte[])">
            <summary>
            Allocate a new RecyclableMemoryStream object
            </summary>
            <param name="memoryManager">The memory manager</param>
            <param name="tag">A string identifying this stream for logging and debugging purposes</param>
            <param name="requestedSize">The initial requested size to prevent future allocations</param>
            <param name="initialLargeBuffer">An initial buffer to use. This buffer will be owned by the stream and returned to the memory manager upon Dispose.</param>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.Dispose(System.Boolean)">
            <summary>
            Returns the memory used by this stream back to the pool.
            </summary>
            <param name="disposing">Whether we're disposing (true), or being called by the finalizer (false)</param>
            <remarks>This method is not thread safe and it may not be called more than once.</remarks>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.Close">
            <summary>
            Equivalent to Dispose
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStream.Capacity">
            <summary>
            Gets or sets the capacity
            </summary>
            <remarks>Capacity is always in multiples of the memory manager's block size, unless
            the large buffer is in use.  Capacity never decreases during a stream's lifetime. 
            Explicitly setting the capacity to a lower value than the current value will have no effect. 
            This is because the buffers are all pooled by chunks and there's little reason to 
            allow stream truncation.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStream.Length">
            <summary>
            Gets the number of bytes written to this stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStream.Position">
            <summary>
            Gets the current position in the stream
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStream.CanRead">
            <summary>
            Whether the stream can currently read
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStream.CanSeek">
            <summary>
            Whether the stream can currently seek
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStream.CanTimeout">
            <summary>
            Always false
            </summary>
        </member>
        <member name="P:Microsoft.IO.RecyclableMemoryStream.CanWrite">
            <summary>
            Whether the stream can currently write
            </summary>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.GetBuffer">
            <summary>
            Returns a single buffer containing the contents of the stream.
            The buffer may be longer than the stream length.
            </summary>
            <returns>A byte[] buffer</returns>
            <remarks>IMPORTANT: Doing a Write() after calling GetBuffer() invalidates the buffer. The old buffer is held onto
            until Dispose is called, but the next time GetBuffer() is called, a new buffer from the pool will be required.</remarks>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.ToArray">
            <summary>
            Returns a new array with a copy of the buffer's contents. You should almost certainly be using GetBuffer combined with the Length to 
            access the bytes in this stream. Calling ToArray will destroy the benefits of pooled buffers, but it is included
            for the sake of completeness.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from the current position into the provided buffer
            </summary>
            <param name="buffer">Destination buffer</param>
            <param name="offset">Offset into buffer at which to start placing the read bytes.</param>
            <param name="count">Number of bytes to read.</param>
            <returns>The number of bytes read</returns>
            <exception cref="T:System.ArgumentNullException">buffer is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is less than 0</exception>
            <exception cref="T:System.ArgumentException">offset subtracted from the buffer length is less than count</exception>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.SafeRead(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Reads from the specified position into the provided buffer
            </summary>
            <param name="buffer">Destination buffer</param>
            <param name="offset">Offset into buffer at which to start placing the read bytes.</param>
            <param name="count">Number of bytes to read.</param>
            <param name="streamPosition">Position in the stream to start reading from</param>
            <returns>The number of bytes read</returns>
            <exception cref="T:System.ArgumentNullException">buffer is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is less than 0</exception>
            <exception cref="T:System.ArgumentException">offset subtracted from the buffer length is less than count</exception>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the buffer to the stream
            </summary>
            <param name="buffer">Source buffer</param>
            <param name="offset">Start position</param>
            <param name="count">Number of bytes to write</param>
            <exception cref="T:System.ArgumentNullException">buffer is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative</exception>
            <exception cref="T:System.ArgumentException">buffer.Length - offset is not less than count</exception>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.ToString">
            <summary>
            Returns a useful string for debugging. This should not normally be called in actual production code.
            </summary>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.WriteByte(System.Byte)">
            <summary>
            Writes a single byte to the current position in the stream.
            </summary>
            <param name="value">byte value to write</param>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.ReadByte">
            <summary>
            Reads a single byte from the current position in the stream.
            </summary>
            <returns>The byte at the current position, or -1 if the position is at the end of the stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.SafeReadByte(System.Int32@)">
            <summary>
            Reads a single byte from the specified position in the stream.
            </summary>
            <param name="streamPosition">The position in the stream to read from</param>
            <returns>The byte at the current position, or -1 if the position is at the end of the stream.</returns>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">value is negative or larger than MaxStreamLength</exception>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position to the offset from the seek location
            </summary>
            <param name="offset">How many bytes to move</param>
            <param name="loc">From where</param>
            <returns>The new position</returns>
            <exception cref="T:System.ObjectDisposedException">Object has been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset is larger than MaxStreamLength</exception>
            <exception cref="T:System.ArgumentException">Invalid seek origin</exception>
            <exception cref="T:System.IO.IOException">Attempt to set negative position</exception>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.WriteTo(System.IO.Stream)">
            <summary>
            Synchronously writes this stream's bytes to the parameter stream.
            </summary>
            <param name="stream">Destination stream</param>
            <remarks>Important: This does a synchronous write, which may not be desired in some situations</remarks>
        </member>
        <member name="M:Microsoft.IO.RecyclableMemoryStream.ReleaseLargeBuffer">
            <summary>
            Release the large buffer (either stores it for eventual release or returns it immediately).
            </summary>
        </member>
    </members>
</doc>
